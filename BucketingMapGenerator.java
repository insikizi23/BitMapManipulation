/**
 * This just the color map in this implementation will be based on partitioning the color space into evenly-sized buckets. 
 * Then, map each pixel in the bucket to the color at the center of the bucket.
 *
 * @author Insiah Kizilbash
 */
package cs1501_p5;

import java.util.HashMap;
import java.util.Map;

public class BucketingMapGenerator implements ColorMapGenerator_Inter {

    /**
     * Produces an initial palette. For bucketing implementations, the initial
     * palette will be the centers of the evenly-divided buckets. For clustering
     * implementations, the initial palette will be the initial centroids. When
     * needed, a distance metric should be specified when the color map
     * generator is constructed.
     *
     * @param pixelArray the 2D Pixel array that represents a bitmap image
     * @param numColors the number of desired colors in the palette
     * @return a Pixel array containing numColors elements
     */
    public Pixel[] generateColorPalette(Pixel[][] pixelArray, int numColors){
        double num = Math.pow(2, 24);
        double bucket = num/numColors;
        double half = bucket/2;
        
        Pixel[] palette = new Pixel[numColors];

        for (int i=0; i<palette.length; i++) {
            double center = bucket*i + half;

            
            int red = ((int)center >> 16) & 0xFF;
            int green = ((int)center >> 8) & 0xFF;
            int blue = (int)center & 0xFF;

            palette[i] = new Pixel(red, green, blue);
        }

        return palette;
    }

    /**
     * Computes the reduced color map. For bucketing implementations, this will
     * map each color to the center of its bucket. For clustering
     * implementations, this will map each color to its final centroid. When
     * needed, a distance metric should be specified when the color map
     * generator is constructed.
     *
     * @param pixelArray the pixels array that represents a bitmap image
     * @param initialColorPalette an initial color palette, such as those
     * generated by generateColorPalette, represented as an array of Pixels
     * @return A Map that maps each distinct color in pixelArray to a final
     * color
     */
   public Map<Pixel, Pixel> generateColorMap(Pixel[][] pixelArray, Pixel[] initialColorPalette){
        Map<Pixel, Pixel> colorMap = new HashMap<>();

        int numOfColors = initialColorPalette.length;
        int bucket = (1 << 24)/numOfColors;

        for (Pixel[] i : pixelArray) {
            for (Pixel pixel : i) {
                if (colorMap.containsKey(pixel))
                    continue;

                int transition = (pixel.getRed() << 16) | (pixel.getGreen() << 8) | pixel.getBlue();
                int index = transition/bucket;
                Pixel mappedColor = initialColorPalette[index];

                colorMap.put(pixel, mappedColor);
            }
        }
        return colorMap;
    }
}